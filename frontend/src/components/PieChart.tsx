// ignore types for this file due to unresolved d3 types
// @ts-nocheck

import { useMemo } from "react";
import * as d3 from "d3";
import Title from "./Title";

type DataItem = {
  name: string;
  value: number;
};
type PieChartProps = {
  data: { name: string; value: number }[];
};

const MARGIN_X = 150;
const MARGIN_Y = 50;
const INFLEXION_PADDING = 15; // space between donut and label inflexion point

const PieChart = ({data} : PieChartProps ) => {
  if (Object.keys(data).length === 0) return;
  let total = 0;
  for (let i = 0; i < data.length; i++) {
    total += data[i].value;
  }
  console.log(total);
  const width = 700;
  const height = 500;
  const radius = Math.min(width - 2 * MARGIN_X, height - 2 * MARGIN_Y) / 2;

  const pie = useMemo(() => {
    const pieGenerator = d3.pie<any, DataItem>().value((d) => d.value);
    return pieGenerator(data);
  }, [data]);

  const arcGenerator = d3.arc();

  const shapes = pie.map((grp, i) => {
    // First arc is for the pie
    const sliceInfo = {
      innerRadius: 0,
      outerRadius: radius,
      startAngle: grp.startAngle,
      endAngle: grp.endAngle,
    };
    const centroid = arcGenerator.centroid(sliceInfo);
    const slicePath = arcGenerator(sliceInfo); 

    // Second arc is for the legend inflexion point
    const inflexionInfo = {
      innerRadius: radius + INFLEXION_PADDING,
      outerRadius: radius + INFLEXION_PADDING,
      startAngle: grp.startAngle,
      endAngle: grp.endAngle,
    };
    const inflexionPoint = arcGenerator.centroid(inflexionInfo);

    const isRightLabel = inflexionPoint[0] > 0;
    const labelPosX = inflexionPoint[0] + 50 * (isRightLabel ? 1 : -1);
    const textAnchor = isRightLabel ? "start" : "end";
    const label = grp.data.name + " (" + ((Math.round((grp.value/total) * 100) / 100 * 100)).toFixed(1) +  "% )";

    return (
      <g key={i}>
        <path d={slicePath} fill={data[i].name == "Cars" ? "#FF0000" : data[i].name == "Bus" ? "#FFA500" : data[i].name == "Trains" ? "#272B2E" : data[i].name == "Light Rail" ? "#C4A484" : data[i].name == "Subway" ? "#7B5343" : "#FFFFF" } />
        <circle cx={centroid[0]} cy={centroid[1]} r={2} />
        <line
          x1={centroid[0]}
          y1={centroid[1]}
          x2={inflexionPoint[0]}
          y2={inflexionPoint[1]}
          stroke={"black"}
          fill={"black"}
        />
        <line
          x1={inflexionPoint[0]}
          y1={inflexionPoint[1]}
          x2={labelPosX}
          y2={inflexionPoint[1]}
          stroke={"black"}
          fill={"black"}
        />
        <text
          x={labelPosX + (isRightLabel ? 2 : -2)}
          y={inflexionPoint[1]}
          textAnchor={textAnchor}
          dominantBaseline="middle"
          fontSize={13}
          fontWeight={"bold"}
        >
          {label}
        </text>
      </g>
    );
  });

  return (
    <svg width={width} height={height} style={{ display: "inline-block" }}>
      <Title height={height + 240} width={width} text="Percentage of Emissions Generated by Each Mode" />
      <g transform={`translate(${width / 2}, ${height / 2})`}>{shapes}</g>
    </svg>
  )
}

export default PieChart